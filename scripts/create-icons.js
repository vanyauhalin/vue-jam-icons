const chalk = require('chalk');
const fs = require('fs').promises;
const path = require('path');
const template = require('lodash/template');

const pack = require('../package.json');
const tempIcons = require('./temp/icons').default;
const tempNews = require('./temp/news').newIcons;
const config = require('./config.json');

const { pascalCase } = require('./utils');

const E = chalk.red.bold('Error');
const D = chalk.green.bold('Done');
let isE = false;

const today = new Date();
const data = {
  versions: {
    svg: config.version,
    vue: pack.version,
  },
  licenses: {
    svg: config.license,
    vue: pack.license,
  },
  homepages: {
    svg: config.homepage,
    vue: pack.homepage,
  },
  generated: today.toISOString(),
  iconObjects: [],
  icons: {},
};

const folders = {
  component: path.resolve('../src/icons.js'),
  docs: path.resolve('../docs/data/icons.js'),
};

const templates = {
  note: `/**
 * Jam icons prepared for use in the component.
 *
 * jam-icons:
 *   @version  <%= versions.svg %>
 *   @license  <%= licenses.svg %>
 *   @homepage <%= homepages.svg %>
 *
 * vue-jam-icons:
 *   @version  <%= versions.vue %>
 *   @license  <%= licenses.vue %>
 *   @homepage <%= homepages.vue %>
 *
 * @generated <%= generated %>
 *
 * This file is generated on each build, so do not edit this file.
 */`,
};
templates.component = template(`${templates.note}
<% iconObjects.forEach(iconObject => { %>
export const <%= iconObject %> = {
  name: '<%= icons[iconObject].name %>',
  viewBox: '<%= icons[iconObject].viewBox %>',
  content: '<%= icons[iconObject].content %>',
};<% }) %>
`);
templates.docs = template(`${templates.note}
<% iconObjects.forEach(iconObject => { %>
export const <%= iconObject %> = {
  name: '<%= icons[iconObject].name %>',
  viewBox: '<%= icons[iconObject].viewBox %>',
  content: '<%= icons[iconObject].content %>',
  type: '<%= icons[iconObject].type %>',
  category: '<%= icons[iconObject].category %>',
  keywords: '<%= icons[iconObject].keywords %>',
  new: '<%= icons[iconObject].new %>',
};<% }) %>
`);

const processIcon = (icon) => new Promise((resolve) => {
  const {
    name,
    viewBox,
    type,
    category,
    keywords,
  } = icon;
  const content = icon.path.replace(/'/g, '"');

  if (!name || !viewBox || !type || !category || !content) {
    if (!isE) {
      isE = true;

      console.log();
    }

    console.error(`    ${E} in the '${JSON.stringify(icon)}'.`);
    resolve();
  }

  const iconObject = `JIcon${pascalCase(name)}`;

  data.icons[iconObject] = {
    name,
    content,
    viewBox,
    type,
    category,
    keywords,
    new: tempNews.includes(name),
  };
  data.iconObjects.push(iconObject);

  resolve();
});

const main = async () => {
  process.stdout.write('  – Reading temporary array: ');

  await Promise.all(tempIcons.map((icon) => processIcon(icon)));

  if (isE) {
    console.log();
    process.exit(1);
  }

  console.log(D);

  data.iconObjects = data.iconObjects.sort();

  process.stdout.write('  – Creating icon objects: ');

  await fs.writeFile(folders.component, templates.component(data), 'utf8');
  await fs.writeFile(folders.docs, templates.docs(data), 'utf8');

  console.log(D);
};

main();
